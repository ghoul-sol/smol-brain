{
  "address": "0xd666d1CC3102cd03e07794A61E5F4333B4239F53",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "landMaxLevel",
          "type": "uint256"
        }
      ],
      "name": "LandMaxLevel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LandMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "availableLevel",
          "type": "uint256"
        }
      ],
      "name": "LandUpgrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "levelIQCost",
          "type": "uint256"
        }
      ],
      "name": "LevelIQCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "smolBrain",
          "type": "address"
        }
      ],
      "name": "SmolBrainSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SMOLBRAIN_MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SMOLBRAIN_OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "canUpgrade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isUpgradeAvailable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "availableLevel",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "findBiggestBrainIQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "highestIQ",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "grantMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "grantOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "landLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "landMaxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levelIQCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURItoSet",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_levelIQCost",
          "type": "uint256"
        }
      ],
      "name": "setLevelIQCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_landMaxLevel",
          "type": "uint256"
        }
      ],
      "name": "setMaxLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_smolBrain",
          "type": "address"
        }
      ],
      "name": "setSmolBrain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smolBrain",
      "outputs": [
        {
          "internalType": "contract SmolBrain",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "upgradeSafe",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e6f6387dde18bd940cdb8394237cbb6bccbf15b4cae0710b8520b0e34c69570",
  "receipt": {
    "to": null,
    "from": "0x393248aE29A7C2128E8E27d23330b1F87E0600fc",
    "contractAddress": "0xd666d1CC3102cd03e07794A61E5F4333B4239F53",
    "transactionIndex": 0,
    "gasUsed": "89981142",
    "logsBloom": "0x
    "blockHash": "0x5c2d5ffbad026a3651eefa4236d8b3151ddc65b9b96201253c770c3382e43034",
    "transactionHash": "0x7e6f6387dde18bd940cdb8394237cbb6bccbf15b4cae0710b8520b0e34c69570",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3162849,
        "transactionHash": "0x7e6f6387dde18bd940cdb8394237cbb6bccbf15b4cae0710b8520b0e34c69570",
        "address": "0xd666d1CC3102cd03e07794A61E5F4333B4239F53",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xcffa9b50753c7b5036f84470434f5fc280bacb0c75da644f758e47448764b1fd",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xcffa9b50753c7b5036f84470434f5fc280bacb0c75da644f758e47448764b1fd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5c2d5ffbad026a3651eefa4236d8b3151ddc65b9b96201253c770c3382e43034"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3162849,
        "transactionHash": "0x7e6f6387dde18bd940cdb8394237cbb6bccbf15b4cae0710b8520b0e34c69570",
        "address": "0xd666d1CC3102cd03e07794A61E5F4333B4239F53",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x4ace3e268e2421ceda36da4af4120747b9ba01b2932e46e900cf59bc08264642",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xcffa9b50753c7b5036f84470434f5fc280bacb0c75da644f758e47448764b1fd"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5c2d5ffbad026a3651eefa4236d8b3151ddc65b9b96201253c770c3382e43034"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3162849,
        "transactionHash": "0x7e6f6387dde18bd940cdb8394237cbb6bccbf15b4cae0710b8520b0e34c69570",
        "address": "0xd666d1CC3102cd03e07794A61E5F4333B4239F53",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xcffa9b50753c7b5036f84470434f5fc280bacb0c75da644f758e47448764b1fd",
          "0x000000000000000000000000393248ae29a7c2128e8e27d23330b1f87e0600fc",
          "0x000000000000000000000000393248ae29a7c2128e8e27d23330b1f87e0600fc"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x5c2d5ffbad026a3651eefa4236d8b3151ddc65b9b96201253c770c3382e43034"
      }
    ],
    "blockNumber": 3162849,
    "cumulativeGasUsed": "68604942",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "46ff15ae2ecfdaf8bc741a1f67ab9209",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landMaxLevel\",\"type\":\"uint256\"}],\"name\":\"LandMaxLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LandMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableLevel\",\"type\":\"uint256\"}],\"name\":\"LandUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"levelIQCost\",\"type\":\"uint256\"}],\"name\":\"LevelIQCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smolBrain\",\"type\":\"address\"}],\"name\":\"SmolBrainSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMOLBRAIN_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMOLBRAIN_OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"canUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isUpgradeAvailable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"availableLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"findBiggestBrainIQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"highestIQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"grantMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landMaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelIQCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURItoSet\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelIQCost\",\"type\":\"uint256\"}],\"name\":\"setLevelIQCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_landMaxLevel\",\"type\":\"uint256\"}],\"name\":\"setMaxLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smolBrain\",\"type\":\"address\"}],\"name\":\"setSmolBrain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smolBrain\",\"outputs\":[{\"internalType\":\"contract SmolBrain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"upgradeSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"canUpgrade(uint256)\":{\"params\":{\"_tokenId\":\"tokenId of the land\"},\"returns\":{\"availableLevel\":\"what level can land be upgraded to\",\"isUpgradeAvailable\":\"true if higher level is available\"}},\"findBiggestBrainIQ(address)\":{\"params\":{\"_owner\":\"owner of the land\"},\"returns\":{\"highestIQ\":\"IQ of the biggest brain\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"upgrade(uint256)\":{\"params\":{\"_tokenId\":\"tokenId of the land\"}}},\"stateVariables\":{\"landLevels\":{\"details\":\"tokenId => land level\"},\"landMaxLevel\":{\"details\":\"18 decimals\"},\"levelIQCost\":{\"details\":\"18 decimals\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Land.sol\":\"Land\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/Land.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport './SmolBrain.sol';\\nimport \\\"./MinterControl.sol\\\";\\n\\ncontract Land is MinterControl, ERC721Enumerable {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdTracker;\\n    string public baseURI;\\n\\n    /// @dev 18 decimals\\n    uint256 public landMaxLevel;\\n    /// @dev 18 decimals\\n    uint256 public levelIQCost;\\n\\n    /// @dev tokenId => land level\\n    mapping(uint256 => uint256) public landLevels;\\n\\n    SmolBrain public smolBrain;\\n\\n    event LandMint(address indexed to, uint256 tokenId);\\n    event LandUpgrade(uint256 indexed tokenId, uint256 availableLevel);\\n    event LandMaxLevel(uint256 landMaxLevel);\\n    event LevelIQCost(uint256 levelIQCost);\\n    event SmolBrainSet(address smolBrain);\\n\\n    constructor() ERC721(\\\"Smol Brain Land\\\", \\\"SmolBrainLand\\\") {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721Enumerable, AccessControl) returns (bool) {\\n        return ERC721Enumerable.supportsInterface(interfaceId) || AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    function mint(address _to) external onlyMinter {\\n        emit LandMint(_to, _tokenIdTracker.current());\\n\\n        _safeMint(_to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"Land: URI query for nonexistent token\\\");\\n\\n        (, uint256 availableLevel) = canUpgrade(_tokenId);\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, availableLevel.toString())) : \\\"\\\";\\n    }\\n\\n    /// @param _tokenId tokenId of the land\\n    /// @return isUpgradeAvailable true if higher level is available\\n    /// @return availableLevel what level can land be upgraded to\\n    function canUpgrade(uint256 _tokenId) public view returns (bool isUpgradeAvailable, uint256 availableLevel) {\\n        uint256 highestIQ = findBiggestBrainIQ(ownerOf(_tokenId));\\n        uint256 averageIQ = smolBrain.averageIQ();\\n        uint256 maxLevel = Math.min(averageIQ / levelIQCost, landMaxLevel);\\n        availableLevel = Math.min(highestIQ / levelIQCost, maxLevel);\\n        uint256 storedLevel = landLevels[_tokenId];\\n        if (storedLevel < availableLevel) {\\n            isUpgradeAvailable = true;\\n        }\\n    }\\n\\n    /// @param _owner owner of the land\\n    /// @return highestIQ IQ of the biggest brain\\n    function findBiggestBrainIQ(address _owner) public view returns (uint256 highestIQ) {\\n        uint256 length = smolBrain.balanceOf(_owner);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 tokenId = smolBrain.tokenOfOwnerByIndex(_owner, i);\\n            uint256 IQ = smolBrain.scanBrain(tokenId);\\n            if (IQ > highestIQ) {\\n                highestIQ = IQ;\\n            }\\n        }\\n    }\\n\\n    /// @param _tokenId tokenId of the land\\n    function upgrade(uint256 _tokenId) external {\\n        require(upgradeSafe(_tokenId), \\\"Land: nothing to upgrade\\\");\\n    }\\n\\n    function upgradeSafe(uint256 _tokenId) public returns (bool) {\\n        (bool isUpgradeAvailable, uint256 availableLevel) = canUpgrade(_tokenId);\\n        if (isUpgradeAvailable) {\\n            landLevels[_tokenId] = availableLevel;\\n            emit LandUpgrade(_tokenId, availableLevel);\\n        }\\n        return isUpgradeAvailable;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal override {\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n\\n        require(balanceOf(_to) == 0, \\\"Land: can own only one land\\\");\\n        if (_from != address(0)) upgradeSafe(_tokenId);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    // ADMIN\\n\\n    function setSmolBrain(address _smolBrain) external onlyOwner {\\n        smolBrain = SmolBrain(_smolBrain);\\n        emit SmolBrainSet(_smolBrain);\\n    }\\n\\n    function setMaxLevel(uint256 _landMaxLevel) external onlyOwner {\\n        landMaxLevel = _landMaxLevel;\\n        emit LandMaxLevel(_landMaxLevel);\\n    }\\n\\n    function setLevelIQCost(uint256 _levelIQCost) external onlyOwner {\\n        levelIQCost = _levelIQCost;\\n        emit LevelIQCost(_levelIQCost);\\n    }\\n\\n    function setBaseURI(string memory _baseURItoSet) external onlyOwner {\\n        baseURI = _baseURItoSet;\\n    }\\n}\\n\",\"keccak256\":\"0x74772edb9066c90067c8b814f17ab30730134729b525a0ab012494021725556b\",\"license\":\"MIT\"},\"contracts/MinterControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nabstract contract MinterControl is AccessControl {\\n    bytes32 public constant SMOLBRAIN_OWNER_ROLE = keccak256(\\\"SMOLBRAIN_OWNER_ROLE\\\");\\n    bytes32 public constant SMOLBRAIN_MINTER_ROLE = keccak256(\\\"SMOLBRAIN_MINTER_ROLE\\\");\\n\\n    modifier onlyOwner() {\\n        require(hasRole(SMOLBRAIN_OWNER_ROLE, _msgSender()), \\\"MinterControl: not a SMOLBRAIN_OWNER_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"MinterControl: not a SMOLBRAIN_MINTER_ROLE\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setRoleAdmin(SMOLBRAIN_OWNER_ROLE, SMOLBRAIN_OWNER_ROLE);\\n        _setRoleAdmin(SMOLBRAIN_MINTER_ROLE, SMOLBRAIN_OWNER_ROLE);\\n\\n        _setupRole(SMOLBRAIN_OWNER_ROLE, _msgSender());\\n    }\\n\\n    function grantMinter(address _minter) external {\\n        grantRole(SMOLBRAIN_MINTER_ROLE, _minter);\\n    }\\n\\n    function isMinter(address _minter) public view returns (bool) {\\n        return hasRole(SMOLBRAIN_MINTER_ROLE, _minter);\\n    }\\n\\n    function grantOwner(address _owner) external {\\n        grantRole(SMOLBRAIN_OWNER_ROLE, _owner);\\n    }\\n\\n    function isOwner(address _owner) public view returns (bool) {\\n        return hasRole(SMOLBRAIN_OWNER_ROLE, _owner);\\n    }\\n}\\n\",\"keccak256\":\"0xbae1dc4f366fc4720a03ce87b5cc9282cd89cbaad7559faa08f8bfde4901da48\",\"license\":\"MIT\"},\"contracts/School.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './SmolBrain.sol';\\n\\ncontract School is Ownable {\\n    uint256 public constant WEEK = 7 days;\\n    /// @dev 18 decimals\\n    uint256 public iqPerWeek;\\n    /// @dev 18 decimals\\n    uint256 public totalIqStored;\\n    /// @dev unix timestamp\\n    uint256 public lastRewardTimestamp;\\n    uint256 public smolBrainSupply;\\n\\n    SmolBrain public smolBrain;\\n\\n    mapping(uint256 => uint256) public timestampJoined;\\n\\n    event JoinSchool(uint256 tokenId);\\n    event DropSchool(uint256 tokenId);\\n    event SetIqPerWeek(uint256 iqPerWeek);\\n    event SmolBrainSet(address smolBrain);\\n\\n    modifier onlySmolBrainOwner(uint256 _tokenId) {\\n        require(smolBrain.ownerOf(_tokenId) == msg.sender, \\\"School: only owner can send to school\\\");\\n        _;\\n    }\\n\\n    modifier atSchool(uint256 _tokenId, bool expectedAtSchool) {\\n        require(isAtSchool(_tokenId) == expectedAtSchool, \\\"School: wrong school attendance\\\");\\n        _;\\n    }\\n\\n    modifier updateTotalIQ(bool isJoining) {\\n        if (smolBrainSupply > 0) {\\n            totalIqStored = totalIQ();\\n        }\\n        lastRewardTimestamp = block.timestamp;\\n        isJoining ? smolBrainSupply++ : smolBrainSupply--;\\n        _;\\n    }\\n\\n    function totalIQ() public view returns (uint256) {\\n        uint256 timeDelta = block.timestamp - lastRewardTimestamp;\\n        return totalIqStored + smolBrainSupply * iqPerWeek * timeDelta / WEEK;\\n    }\\n\\n    function iqEarned(uint256 _tokenId) public view returns (uint256 iq) {\\n        if (timestampJoined[_tokenId] == 0) return 0;\\n        uint256 timedelta = block.timestamp - timestampJoined[_tokenId];\\n        iq = iqPerWeek * timedelta / WEEK;\\n    }\\n\\n    function isAtSchool(uint256 _tokenId) public view returns (bool) {\\n        return timestampJoined[_tokenId] > 0;\\n    }\\n\\n    function join(uint256 _tokenId)\\n        external\\n        onlySmolBrainOwner(_tokenId)\\n        atSchool(_tokenId, false)\\n        updateTotalIQ(true)\\n    {\\n        timestampJoined[_tokenId] = block.timestamp;\\n        emit JoinSchool(_tokenId);\\n    }\\n\\n    function drop(uint256 _tokenId)\\n        external\\n        onlySmolBrainOwner(_tokenId)\\n        atSchool(_tokenId, true)\\n        updateTotalIQ(false)\\n    {\\n        smolBrain.schoolDrop(_tokenId, iqEarned(_tokenId));\\n        timestampJoined[_tokenId] = 0;\\n        emit DropSchool(_tokenId);\\n    }\\n\\n    // ADMIN\\n\\n    function setSmolBrain(address _smolBrain) external onlyOwner {\\n        smolBrain = SmolBrain(_smolBrain);\\n        emit SmolBrainSet(_smolBrain);\\n    }\\n\\n    /// @param _iqPerWeek NUmber of IQ points to earn a week, 18 decimals\\n    function setIqPerWeek(uint256 _iqPerWeek) external onlyOwner {\\n        iqPerWeek = _iqPerWeek;\\n        emit SetIqPerWeek(_iqPerWeek);\\n    }\\n}\\n\",\"keccak256\":\"0xb8626a0ae12fcf88cbdef89ce678e6a05c6170ea0b1560674d0ce1929f763152\",\"license\":\"MIT\"},\"contracts/SmolBrain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport './School.sol';\\nimport './Land.sol';\\nimport \\\"./MinterControl.sol\\\";\\n\\ncontract SmolBrain is MinterControl, ERC721Enumerable {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    uint256 constant LAST_MALE = 6710;\\n    uint256 constant LAST_FEMALE = 13421;\\n\\n    enum Gender { Male, Female }\\n\\n    Counters.Counter private _maleTokenIdTracker;\\n    Counters.Counter private _femaleTokenIdTracker;\\n    string public baseURI;\\n\\n    /// @dev 18 decimals\\n    uint256 public brainMaxLevel;\\n    /// @dev 18 decimals\\n    uint256 public levelIQCost;\\n\\n    School public school;\\n    Land public land;\\n\\n    // tokenId => IQ\\n    mapping(uint256 => uint256) public brainz;\\n\\n    event SmolBrainMint(address to, uint256 tokenId, Gender gender);\\n    event LevelIQCost(uint256 levelIQCost);\\n    event LandMaxLevel(uint256 brainMaxLevel);\\n    event SchoolSet(address school);\\n    event LandSet(address land);\\n\\n    modifier onlySchool() {\\n        require(msg.sender == address(school), \\\"SmolBrain: !school\\\");\\n        _;\\n    }\\n\\n    constructor(address _luckyWinner) ERC721(\\\"Smol Brain\\\", \\\"SmolBrain\\\") {\\n        _femaleTokenIdTracker._value = LAST_MALE + 1;\\n        _mint(_luckyWinner, Gender.Male);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721Enumerable, AccessControl) returns (bool) {\\n        return ERC721Enumerable.supportsInterface(interfaceId) || AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    function mintMale(address _to) external onlyMinter {\\n        _mint(_to, Gender.Male);\\n    }\\n\\n    function mintFemale(address _to) external onlyMinter {\\n        _mint(_to, Gender.Female);\\n    }\\n\\n    function getGender(uint256 _tokenId) public pure returns (Gender) {\\n        return _tokenId <= LAST_MALE ? Gender.Male : Gender.Female;\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"SmolBrain: URI query for nonexistent token\\\");\\n\\n        uint256 level = Math.min(scanBrain(_tokenId) / levelIQCost, brainMaxLevel);\\n        return bytes(baseURI).length > 0 ?\\n            string(abi.encodePacked(\\n                baseURI,\\n                _tokenId.toString(),\\n                \\\"/\\\",\\n                level.toString()\\n            ))\\n            : \\\"\\\";\\n    }\\n\\n    function scanBrain(uint256 _tokenId) public view returns (uint256 IQ) {\\n        IQ = brainz[_tokenId] + school.iqEarned(_tokenId);\\n    }\\n\\n    function averageIQ() public view returns (uint256) {\\n        if (totalSupply() == 0) return 0;\\n        uint256 totalIQ = school.totalIQ();\\n        return totalIQ / totalSupply();\\n    }\\n\\n    /// @param _tokenId tokenId of the land\\n    function schoolDrop(uint256 _tokenId, uint256 _iqEarned) external onlySchool {\\n        brainz[_tokenId] += _iqEarned;\\n    }\\n\\n    function _mint(address _to, Gender _gender) internal {\\n        uint256 _tokenId;\\n        if (_gender == Gender.Male) {\\n            _tokenId = _maleTokenIdTracker.current();\\n            _maleTokenIdTracker.increment();\\n            require(_tokenId <= LAST_MALE, \\\"SmolBrain: exceeded tokenId for male\\\");\\n        } else {\\n            _tokenId = _femaleTokenIdTracker.current();\\n            _femaleTokenIdTracker.increment();\\n            require(_tokenId <= LAST_FEMALE, \\\"SmolBrain: exceeded tokenId for female\\\");\\n        }\\n\\n        emit SmolBrainMint(_to, _tokenId, _gender);\\n        _safeMint(_to, _tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal override {\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n\\n        if (address(school) != address(0))\\n            require(!school.isAtSchool(_tokenId), \\\"SmolBrain: is at school. Drop school to transfer.\\\");\\n        if (_from != address(0))\\n            land.upgradeSafe(land.tokenOfOwnerByIndex(_from, 0));\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    // ADMIN\\n\\n    function setSchool(address _school) external onlyOwner {\\n        school = School(_school);\\n        emit SchoolSet(_school);\\n    }\\n\\n    function setLand(address _land) external onlyOwner {\\n        land = Land(_land);\\n        emit LandSet(_land);\\n    }\\n\\n    function setLevelIQCost(uint256 _levelIQCost) external onlyOwner {\\n        levelIQCost = _levelIQCost;\\n        emit LevelIQCost(_levelIQCost);\\n    }\\n\\n    function setMaxLevel(uint256 _brainMaxLevel) external onlyOwner {\\n        brainMaxLevel = _brainMaxLevel;\\n        emit LandMaxLevel(_brainMaxLevel);\\n    }\\n\\n    function setBaseURI(string memory _baseURItoSet) external onlyOwner {\\n        baseURI = _baseURItoSet;\\n    }\\n}\\n\",\"keccak256\":\"0x02d362a73b8bc4838a4b86e87dca7268ef0a1004a49526d0a6fe0117c687fdff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600f81526020016e14db5bdb08109c985a5b8813185b99608a1b8152506040518060400160405280600d81526020016c14db5bdb109c985a5b93185b99609a1b8152506200008160008051602062002cdd833981519152806200010b60201b60201c565b620000bc7f4ace3e268e2421ceda36da4af4120747b9ba01b2932e46e900cf59bc0826464260008051602062002cdd8339815191526200010b565b620000d760008051602062002cdd8339815191523362000156565b8151620000ec90600190602085019062000206565b5080516200010290600290602084019062000206565b505050620002e9565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b62000162828262000166565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000162576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001c23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200021490620002ac565b90600052602060002090601f01602090048101928262000238576000855562000283565b82601f106200025357805160ff191683800117855562000283565b8280016001018555821562000283579182015b828111156200028357825182559160200191906001019062000266565b506200029192915062000295565b5090565b5b8082111562000291576000815560010162000296565b600181811c90821680620002c157607f821691505b60208210811415620002e357634e487b7160e01b600052602260045260246000fd5b50919050565b6129e480620002f96000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80636d6e3bf011610146578063aa271e1a116100c3578063d57cd14511610087578063d57cd1451461054b578063dc9780591461055e578063dcaefbfd14610571578063e985e9c514610584578063f298f9c5146105c0578063f527e29a146105c957600080fd5b8063aa271e1a146104ec578063b88d4fde146104ff578063c57cbed514610512578063c87b56dd14610525578063d547741f1461053857600080fd5b806395d89b411161010a57806395d89b411461048f5780639f04213614610497578063a217fddf146104aa578063a22cb465146104b2578063a48e0051146104c557600080fd5b80636d6e3bf01461042d57806370a082311461043657806381151e671461044957806391d148541461045c57806391fb1ffe1461046f57600080fd5b80632f54bf6e116101df57806345977d03116101a357806345977d03146103c65780634f6ccce7146103d957806355f804b3146103ec5780636352211e146103ff5780636a627842146104125780636c0360eb1461042557600080fd5b80632f54bf6e146103675780632f745c591461037a578063344f1ba51461038d57806336568abe146103a057806342842e0e146103b357600080fd5b806318160ddd1161022657806318160ddd1461030357806323b872dd1461030b578063248a9ca31461031e578063261707fa146103415780632f2ff15d1461035457600080fd5b806301ffc9a71461026357806302ed29e01461028b57806306fdde03146102ae578063081812fc146102c3578063095ea7b3146102ee575b600080fd5b6102766102713660046124bf565b6105f3565b60405190151581526020015b60405180910390f35b6102a060008051602061298f83398151915281565b604051908152602001610282565b6102b6610613565b60405161028291906126fc565b6102d66102d1366004612483565b6106a5565b6040516001600160a01b039091168152602001610282565b6103016102fc366004612459565b61073f565b005b6009546102a0565b610301610319366004612365565b610855565b6102a061032c366004612483565b60009081526020819052604090206001015490565b61030161034f366004612317565b610886565b61030161036236600461249c565b6108b3565b610276610375366004612317565b6108d9565b6102a0610388366004612459565b6108f3565b61030161039b366004612483565b610989565b6103016103ae36600461249c565b6109f9565b6103016103c1366004612365565b610a77565b6103016103d4366004612483565b610a92565b6102a06103e7366004612483565b610ae7565b6103016103fa3660046124f9565b610b7a565b6102d661040d366004612483565b610bc1565b610301610420366004612317565b610c38565b6102b6610d05565b6102a0600e5481565b6102a0610444366004612317565b610d93565b610276610457366004612483565b610e1a565b61027661046a36600461249c565b610e87565b6102a061047d366004612483565b600f6020526000908152604090205481565b6102b6610eb0565b6103016104a5366004612317565b610ebf565b6102a0600081565b6103016104c036600461241d565b610f41565b6102a07f4ace3e268e2421ceda36da4af4120747b9ba01b2932e46e900cf59bc0826464281565b6102766104fa366004612317565b611006565b61030161050d3660046123a1565b611032565b6010546102d6906001600160a01b031681565b6102b6610533366004612483565b61106a565b61030161054636600461249c565b61114b565b610301610559366004612483565b611171565b61030161056c366004612317565b6111da565b6102a061057f366004612317565b6111f2565b610276610592366004612332565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6102a0600d5481565b6105dc6105d7366004612483565b6113b1565b604080519215158352602083019190915201610282565b60006105fe826114aa565b8061060d575061060d826114cf565b92915050565b606060018054610622906128a0565b80601f016020809104026020016040519081016040528092919081815260200182805461064e906128a0565b801561069b5780601f106106705761010080835404028352916020019161069b565b820191906000526020600020905b81548152906001019060200180831161067e57829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b03166107235760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061074a82610bc1565b9050806001600160a01b0316836001600160a01b031614156107b85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161071a565b336001600160a01b03821614806107d457506107d48133610592565b6108465760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161071a565b6108508383611504565b505050565b61085f3382611572565b61087b5760405162461bcd60e51b815260040161071a906127aa565b610850838383611669565b6108b07f4ace3e268e2421ceda36da4af4120747b9ba01b2932e46e900cf59bc08264642826108b3565b50565b6000828152602081905260409020600101546108cf8133611814565b6108508383611878565b600061060d60008051602061298f83398151915283610e87565b60006108fe83610d93565b82106109605760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161071a565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b6109a160008051602061298f83398151915233610e87565b6109bd5760405162461bcd60e51b815260040161071a90612761565b600d8190556040518181527f2f61ebe91f71a0e705900e252d50f1e06077072fb7f9f7d06a4d609059bb3f0d906020015b60405180910390a150565b6001600160a01b0381163314610a695760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161071a565b610a7382826118fc565b5050565b61085083838360405180602001604052806000815250611032565b610a9b81610e1a565b6108b05760405162461bcd60e51b815260206004820152601860248201527f4c616e643a206e6f7468696e6720746f20757067726164650000000000000000604482015260640161071a565b6000610af260095490565b8210610b555760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161071a565b60098281548110610b6857610b6861294c565b90600052602060002001549050919050565b610b9260008051602061298f83398151915233610e87565b610bae5760405162461bcd60e51b815260040161071a90612761565b8051610a7390600c9060208401906121ec565b6000818152600360205260408120546001600160a01b03168061060d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161071a565b610c4133611006565b610ca05760405162461bcd60e51b815260206004820152602a60248201527f4d696e746572436f6e74726f6c3a206e6f74206120534d4f4c425241494e5f4d604482015269494e5445525f524f4c4560b01b606482015260840161071a565b806001600160a01b03167fa28fb460c72a683a467d473a49feb6520de6c7df6f397c7e986d39a44c062346610cd4600b5490565b60405190815260200160405180910390a2610cf781610cf2600b5490565b611961565b6108b0600b80546001019055565b600c8054610d12906128a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3e906128a0565b8015610d8b5780601f10610d6057610100808354040283529160200191610d8b565b820191906000526020600020905b815481529060010190602001808311610d6e57829003601f168201915b505050505081565b60006001600160a01b038216610dfe5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161071a565b506001600160a01b031660009081526004602052604090205490565b6000806000610e28846113b1565b915091508115610e80576000848152600f6020526040908190208290555184907f8ac99fb4a67d192b8aff647b8a1d9d624e78c092a12085c062fbce1d2ce740c490610e779084815260200190565b60405180910390a25b5092915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b606060028054610622906128a0565b610ed760008051602061298f83398151915233610e87565b610ef35760405162461bcd60e51b815260040161071a90612761565b601080546001600160a01b0319166001600160a01b0383169081179091556040519081527f12f789c3a21da2a95325bae92834ecef6381e3e8af16ab037239c8f5f9ae6472906020016109ee565b6001600160a01b038216331415610f9a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161071a565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061060d7f4ace3e268e2421ceda36da4af4120747b9ba01b2932e46e900cf59bc0826464283610e87565b61103c3383611572565b6110585760405162461bcd60e51b815260040161071a906127aa565b6110648484848461197b565b50505050565b6000818152600360205260409020546060906001600160a01b03166110df5760405162461bcd60e51b815260206004820152602560248201527f4c616e643a2055524920717565727920666f72206e6f6e6578697374656e74206044820152643a37b5b2b760d91b606482015260840161071a565b60006110ea836113b1565b9150506000600c80546110fc906128a0565b9050116111185760405180602001604052806000815250611144565b600c611123826119ae565b6040516020016111349291906125a3565b6040516020818303038152906040525b9392505050565b6000828152602081905260409020600101546111678133611814565b61085083836118fc565b61118960008051602061298f83398151915233610e87565b6111a55760405162461bcd60e51b815260040161071a90612761565b600e8190556040518181527f8b417e0974ccf6cbb52930652bacdfadbcffd507164c6d693038e721f05138a6906020016109ee565b6108b060008051602061298f833981519152826108b3565b6010546040516370a0823160e01b81526001600160a01b03838116600483015260009283929116906370a082319060240160206040518083038186803b15801561123b57600080fd5b505afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190612542565b905060005b818110156113aa57601054604051632f745c5960e01b81526001600160a01b038681166004830152602482018490526000921690632f745c599060440160206040518083038186803b1580156112cd57600080fd5b505afa1580156112e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113059190612542565b60105460405163861b3fe760e01b8152600481018390529192506000916001600160a01b039091169063861b3fe79060240160206040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113879190612542565b905084811115611395578094505b505080806113a2906128db565b915050611278565b5050919050565b60008060006113c261057f85610bc1565b90506000601060009054906101000a90046001600160a01b03166001600160a01b0316630ec3d6346040518163ffffffff1660e01b815260040160206040518083038186803b15801561141457600080fd5b505afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190612542565b90506000611469600e54836114619190612813565b600d54611aac565b9050611482600e548461147c9190612813565b82611aac565b6000878152600f6020526040902054909450848110156114a157600195505b50505050915091565b60006001600160e01b0319821663780e9d6360e01b148061060d575061060d82611ac2565b60006001600160e01b03198216637965db0b60e01b148061060d57506301ffc9a760e01b6001600160e01b031983161461060d565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061153982610bc1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600360205260408120546001600160a01b03166115eb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161071a565b60006115f683610bc1565b9050806001600160a01b0316846001600160a01b031614806116315750836001600160a01b0316611626846106a5565b6001600160a01b0316145b8061166157506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661167c82610bc1565b6001600160a01b0316146116e45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161071a565b6001600160a01b0382166117465760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161071a565b611751838383611b01565b61175c600082611504565b6001600160a01b0383166000908152600460205260408120805460019290611785908490612846565b90915550506001600160a01b03821660009081526004602052604081208054600192906117b39084906127fb565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61181e8282610e87565b610a7357611836816001600160a01b03166014611b7a565b611841836020611b7a565b60405160200161185292919061264a565b60408051601f198184030181529082905262461bcd60e51b825261071a916004016126fc565b6118828282610e87565b610a73576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118b83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119068282610e87565b15610a73576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610a73828260405180602001604052806000815250611d16565b611986848484611669565b61199284848484611d49565b6110645760405162461bcd60e51b815260040161071a9061270f565b6060816119d25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119fc57806119e6816128db565b91506119f59050600a83612813565b91506119d6565b60008167ffffffffffffffff811115611a1757611a17612962565b6040519080825280601f01601f191660200182016040528015611a41576020820181803683370190505b5090505b841561166157611a56600183612846565b9150611a63600a866128f6565b611a6e9060306127fb565b60f81b818381518110611a8357611a8361294c565b60200101906001600160f81b031916908160001a905350611aa5600a86612813565b9450611a45565b6000818310611abb5781611144565b5090919050565b60006001600160e01b031982166380ac58cd60e01b14806105fe57506001600160e01b03198216635b5e139f60e01b148061060d575061060d826114cf565b611b0c838383611e56565b611b1582610d93565b15611b625760405162461bcd60e51b815260206004820152601b60248201527f4c616e643a2063616e206f776e206f6e6c79206f6e65206c616e640000000000604482015260640161071a565b6001600160a01b038316156108505761106481610e1a565b60606000611b89836002612827565b611b949060026127fb565b67ffffffffffffffff811115611bac57611bac612962565b6040519080825280601f01601f191660200182016040528015611bd6576020820181803683370190505b509050600360fc1b81600081518110611bf157611bf161294c565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c2057611c2061294c565b60200101906001600160f81b031916908160001a9053506000611c44846002612827565b611c4f9060016127fb565b90505b6001811115611cc7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c8357611c8361294c565b1a60f81b828281518110611c9957611c9961294c565b60200101906001600160f81b031916908160001a90535060049490941c93611cc081612889565b9050611c52565b5083156111445760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161071a565b611d208383611f0e565b611d2d6000848484611d49565b6108505760405162461bcd60e51b815260040161071a9061270f565b60006001600160a01b0384163b15611e4b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611d8d9033908990889088906004016126bf565b602060405180830381600087803b158015611da757600080fd5b505af1925050508015611dd7575060408051601f3d908101601f19168201909252611dd4918101906124dc565b60015b611e31573d808015611e05576040519150601f19603f3d011682016040523d82523d6000602084013e611e0a565b606091505b508051611e295760405162461bcd60e51b815260040161071a9061270f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611661565b506001949350505050565b6001600160a01b038316611eb157611eac81600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b611ed4565b816001600160a01b0316836001600160a01b031614611ed457611ed4838261205c565b6001600160a01b038216611eeb57610850816120f9565b826001600160a01b0316826001600160a01b0316146108505761085082826121a8565b6001600160a01b038216611f645760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161071a565b6000818152600360205260409020546001600160a01b031615611fc95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161071a565b611fd560008383611b01565b6001600160a01b0382166000908152600460205260408120805460019290611ffe9084906127fb565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000600161206984610d93565b6120739190612846565b6000838152600860205260409020549091508082146120c6576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60095460009061210b90600190612846565b6000838152600a6020526040812054600980549394509092849081106121335761213361294c565b9060005260206000200154905080600983815481106121545761215461294c565b6000918252602080832090910192909255828152600a9091526040808220849055858252812055600980548061218c5761218c612936565b6001900381819060005260206000200160009055905550505050565b60006121b383610d93565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b8280546121f8906128a0565b90600052602060002090601f01602090048101928261221a5760008555612260565b82601f1061223357805160ff1916838001178555612260565b82800160010185558215612260579182015b82811115612260578251825591602001919060010190612245565b5061226c929150612270565b5090565b5b8082111561226c5760008155600101612271565b600067ffffffffffffffff808411156122a0576122a0612962565b604051601f8501601f19908116603f011681019082821181831017156122c8576122c8612962565b816040528093508581528686860111156122e157600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461231257600080fd5b919050565b60006020828403121561232957600080fd5b611144826122fb565b6000806040838503121561234557600080fd5b61234e836122fb565b915061235c602084016122fb565b90509250929050565b60008060006060848603121561237a57600080fd5b612383846122fb565b9250612391602085016122fb565b9150604084013590509250925092565b600080600080608085870312156123b757600080fd5b6123c0856122fb565b93506123ce602086016122fb565b925060408501359150606085013567ffffffffffffffff8111156123f157600080fd5b8501601f8101871361240257600080fd5b61241187823560208401612285565b91505092959194509250565b6000806040838503121561243057600080fd5b612439836122fb565b91506020830135801515811461244e57600080fd5b809150509250929050565b6000806040838503121561246c57600080fd5b612475836122fb565b946020939093013593505050565b60006020828403121561249557600080fd5b5035919050565b600080604083850312156124af57600080fd5b8235915061235c602084016122fb565b6000602082840312156124d157600080fd5b813561114481612978565b6000602082840312156124ee57600080fd5b815161114481612978565b60006020828403121561250b57600080fd5b813567ffffffffffffffff81111561252257600080fd5b8201601f8101841361253357600080fd5b61166184823560208401612285565b60006020828403121561255457600080fd5b5051919050565b6000815180845261257381602086016020860161285d565b601f01601f19169290920160200192915050565b6000815161259981856020860161285d565b9290920192915050565b600080845481600182811c9150808316806125bf57607f831692505b60208084108214156125df57634e487b7160e01b86526022600452602486fd5b8180156125f3576001811461260457612631565b60ff19861689528489019650612631565b60008b81526020902060005b868110156126295781548b820152908501908301612610565b505084890196505b5050505050506126418185612587565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161268281601785016020880161285d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126b381602884016020880161285d565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906126f29083018461255b565b9695505050505050565b602081526000611144602083018461255b565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526029908201527f4d696e746572436f6e74726f6c3a206e6f74206120534d4f4c425241494e5f4f604082015268574e45525f524f4c4560b81b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561280e5761280e61290a565b500190565b60008261282257612822612920565b500490565b60008160001904831182151516156128415761284161290a565b500290565b6000828210156128585761285861290a565b500390565b60005b83811015612878578181015183820152602001612860565b838111156110645750506000910152565b6000816128985761289861290a565b506000190190565b600181811c908216806128b457607f821691505b602082108114156128d557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156128ef576128ef61290a565b5060010190565b60008261290557612905612920565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146108b057600080fdfecffa9b50753c7b5036f84470434f5fc280bacb0c75da644f758e47448764b1fda264697066735822122061404e38f6f96bc9670b264ca0f6110a7cc8a485311942deb9dfbd95c7a05e0f64736f6c63430008070033cffa9b50753c7b5036f84470434f5fc280bacb0c75da644f758e47448764b1fd",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c80636d6e3bf011610146578063aa271e1a116100c3578063d57cd14511610087578063d57cd1451461054b578063dc9780591461055e578063dcaefbfd14610571578063e985e9c514610584578063f298f9c5146105c0578063f527e29a146105c957600080fd5b8063aa271e1a146104ec578063b88d4fde146104ff578063c57cbed514610512578063c87b56dd14610525578063d547741f1461053857600080fd5b806395d89b411161010a57806395d89b411461048f5780639f04213614610497578063a217fddf146104aa578063a22cb465146104b2578063a48e0051146104c557600080fd5b80636d6e3bf01461042d57806370a082311461043657806381151e671461044957806391d148541461045c57806391fb1ffe1461046f57600080fd5b80632f54bf6e116101df57806345977d03116101a357806345977d03146103c65780634f6ccce7146103d957806355f804b3146103ec5780636352211e146103ff5780636a627842146104125780636c0360eb1461042557600080fd5b80632f54bf6e146103675780632f745c591461037a578063344f1ba51461038d57806336568abe146103a057806342842e0e146103b357600080fd5b806318160ddd1161022657806318160ddd1461030357806323b872dd1461030b578063248a9ca31461031e578063261707fa146103415780632f2ff15d1461035457600080fd5b806301ffc9a71461026357806302ed29e01461028b57806306fdde03146102ae578063081812fc146102c3578063095ea7b3146102ee575b600080fd5b6102766102713660046124bf565b6105f3565b60405190151581526020015b60405180910390f35b6102a060008051602061298f83398151915281565b604051908152602001610282565b6102b6610613565b60405161028291906126fc565b6102d66102d1366004612483565b6106a5565b6040516001600160a01b039091168152602001610282565b6103016102fc366004612459565b61073f565b005b6009546102a0565b610301610319366004612365565b610855565b6102a061032c366004612483565b60009081526020819052604090206001015490565b61030161034f366004612317565b610886565b61030161036236600461249c565b6108b3565b610276610375366004612317565b6108d9565b6102a0610388366004612459565b6108f3565b61030161039b366004612483565b610989565b6103016103ae36600461249c565b6109f9565b6103016103c1366004612365565b610a77565b6103016103d4366004612483565b610a92565b6102a06103e7366004612483565b610ae7565b6103016103fa3660046124f9565b610b7a565b6102d661040d366004612483565b610bc1565b610301610420366004612317565b610c38565b6102b6610d05565b6102a0600e5481565b6102a0610444366004612317565b610d93565b610276610457366004612483565b610e1a565b61027661046a36600461249c565b610e87565b6102a061047d366004612483565b600f6020526000908152604090205481565b6102b6610eb0565b6103016104a5366004612317565b610ebf565b6102a0600081565b6103016104c036600461241d565b610f41565b6102a07f4ace3e268e2421ceda36da4af4120747b9ba01b2932e46e900cf59bc0826464281565b6102766104fa366004612317565b611006565b61030161050d3660046123a1565b611032565b6010546102d6906001600160a01b031681565b6102b6610533366004612483565b61106a565b61030161054636600461249c565b61114b565b610301610559366004612483565b611171565b61030161056c366004612317565b6111da565b6102a061057f366004612317565b6111f2565b610276610592366004612332565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6102a0600d5481565b6105dc6105d7366004612483565b6113b1565b604080519215158352602083019190915201610282565b60006105fe826114aa565b8061060d575061060d826114cf565b92915050565b606060018054610622906128a0565b80601f016020809104026020016040519081016040528092919081815260200182805461064e906128a0565b801561069b5780601f106106705761010080835404028352916020019161069b565b820191906000526020600020905b81548152906001019060200180831161067e57829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b03166107235760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061074a82610bc1565b9050806001600160a01b0316836001600160a01b031614156107b85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161071a565b336001600160a01b03821614806107d457506107d48133610592565b6108465760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161071a565b6108508383611504565b505050565b61085f3382611572565b61087b5760405162461bcd60e51b815260040161071a906127aa565b610850838383611669565b6108b07f4ace3e268e2421ceda36da4af4120747b9ba01b2932e46e900cf59bc08264642826108b3565b50565b6000828152602081905260409020600101546108cf8133611814565b6108508383611878565b600061060d60008051602061298f83398151915283610e87565b60006108fe83610d93565b82106109605760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161071a565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b6109a160008051602061298f83398151915233610e87565b6109bd5760405162461bcd60e51b815260040161071a90612761565b600d8190556040518181527f2f61ebe91f71a0e705900e252d50f1e06077072fb7f9f7d06a4d609059bb3f0d906020015b60405180910390a150565b6001600160a01b0381163314610a695760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161071a565b610a7382826118fc565b5050565b61085083838360405180602001604052806000815250611032565b610a9b81610e1a565b6108b05760405162461bcd60e51b815260206004820152601860248201527f4c616e643a206e6f7468696e6720746f20757067726164650000000000000000604482015260640161071a565b6000610af260095490565b8210610b555760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161071a565b60098281548110610b6857610b6861294c565b90600052602060002001549050919050565b610b9260008051602061298f83398151915233610e87565b610bae5760405162461bcd60e51b815260040161071a90612761565b8051610a7390600c9060208401906121ec565b6000818152600360205260408120546001600160a01b03168061060d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161071a565b610c4133611006565b610ca05760405162461bcd60e51b815260206004820152602a60248201527f4d696e746572436f6e74726f6c3a206e6f74206120534d4f4c425241494e5f4d604482015269494e5445525f524f4c4560b01b606482015260840161071a565b806001600160a01b03167fa28fb460c72a683a467d473a49feb6520de6c7df6f397c7e986d39a44c062346610cd4600b5490565b60405190815260200160405180910390a2610cf781610cf2600b5490565b611961565b6108b0600b80546001019055565b600c8054610d12906128a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3e906128a0565b8015610d8b5780601f10610d6057610100808354040283529160200191610d8b565b820191906000526020600020905b815481529060010190602001808311610d6e57829003601f168201915b505050505081565b60006001600160a01b038216610dfe5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161071a565b506001600160a01b031660009081526004602052604090205490565b6000806000610e28846113b1565b915091508115610e80576000848152600f6020526040908190208290555184907f8ac99fb4a67d192b8aff647b8a1d9d624e78c092a12085c062fbce1d2ce740c490610e779084815260200190565b60405180910390a25b5092915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b606060028054610622906128a0565b610ed760008051602061298f83398151915233610e87565b610ef35760405162461bcd60e51b815260040161071a90612761565b601080546001600160a01b0319166001600160a01b0383169081179091556040519081527f12f789c3a21da2a95325bae92834ecef6381e3e8af16ab037239c8f5f9ae6472906020016109ee565b6001600160a01b038216331415610f9a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161071a565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061060d7f4ace3e268e2421ceda36da4af4120747b9ba01b2932e46e900cf59bc0826464283610e87565b61103c3383611572565b6110585760405162461bcd60e51b815260040161071a906127aa565b6110648484848461197b565b50505050565b6000818152600360205260409020546060906001600160a01b03166110df5760405162461bcd60e51b815260206004820152602560248201527f4c616e643a2055524920717565727920666f72206e6f6e6578697374656e74206044820152643a37b5b2b760d91b606482015260840161071a565b60006110ea836113b1565b9150506000600c80546110fc906128a0565b9050116111185760405180602001604052806000815250611144565b600c611123826119ae565b6040516020016111349291906125a3565b6040516020818303038152906040525b9392505050565b6000828152602081905260409020600101546111678133611814565b61085083836118fc565b61118960008051602061298f83398151915233610e87565b6111a55760405162461bcd60e51b815260040161071a90612761565b600e8190556040518181527f8b417e0974ccf6cbb52930652bacdfadbcffd507164c6d693038e721f05138a6906020016109ee565b6108b060008051602061298f833981519152826108b3565b6010546040516370a0823160e01b81526001600160a01b03838116600483015260009283929116906370a082319060240160206040518083038186803b15801561123b57600080fd5b505afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190612542565b905060005b818110156113aa57601054604051632f745c5960e01b81526001600160a01b038681166004830152602482018490526000921690632f745c599060440160206040518083038186803b1580156112cd57600080fd5b505afa1580156112e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113059190612542565b60105460405163861b3fe760e01b8152600481018390529192506000916001600160a01b039091169063861b3fe79060240160206040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113879190612542565b905084811115611395578094505b505080806113a2906128db565b915050611278565b5050919050565b60008060006113c261057f85610bc1565b90506000601060009054906101000a90046001600160a01b03166001600160a01b0316630ec3d6346040518163ffffffff1660e01b815260040160206040518083038186803b15801561141457600080fd5b505afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190612542565b90506000611469600e54836114619190612813565b600d54611aac565b9050611482600e548461147c9190612813565b82611aac565b6000878152600f6020526040902054909450848110156114a157600195505b50505050915091565b60006001600160e01b0319821663780e9d6360e01b148061060d575061060d82611ac2565b60006001600160e01b03198216637965db0b60e01b148061060d57506301ffc9a760e01b6001600160e01b031983161461060d565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061153982610bc1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600360205260408120546001600160a01b03166115eb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161071a565b60006115f683610bc1565b9050806001600160a01b0316846001600160a01b031614806116315750836001600160a01b0316611626846106a5565b6001600160a01b0316145b8061166157506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661167c82610bc1565b6001600160a01b0316146116e45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161071a565b6001600160a01b0382166117465760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161071a565b611751838383611b01565b61175c600082611504565b6001600160a01b0383166000908152600460205260408120805460019290611785908490612846565b90915550506001600160a01b03821660009081526004602052604081208054600192906117b39084906127fb565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61181e8282610e87565b610a7357611836816001600160a01b03166014611b7a565b611841836020611b7a565b60405160200161185292919061264a565b60408051601f198184030181529082905262461bcd60e51b825261071a916004016126fc565b6118828282610e87565b610a73576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118b83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119068282610e87565b15610a73576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610a73828260405180602001604052806000815250611d16565b611986848484611669565b61199284848484611d49565b6110645760405162461bcd60e51b815260040161071a9061270f565b6060816119d25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119fc57806119e6816128db565b91506119f59050600a83612813565b91506119d6565b60008167ffffffffffffffff811115611a1757611a17612962565b6040519080825280601f01601f191660200182016040528015611a41576020820181803683370190505b5090505b841561166157611a56600183612846565b9150611a63600a866128f6565b611a6e9060306127fb565b60f81b818381518110611a8357611a8361294c565b60200101906001600160f81b031916908160001a905350611aa5600a86612813565b9450611a45565b6000818310611abb5781611144565b5090919050565b60006001600160e01b031982166380ac58cd60e01b14806105fe57506001600160e01b03198216635b5e139f60e01b148061060d575061060d826114cf565b611b0c838383611e56565b611b1582610d93565b15611b625760405162461bcd60e51b815260206004820152601b60248201527f4c616e643a2063616e206f776e206f6e6c79206f6e65206c616e640000000000604482015260640161071a565b6001600160a01b038316156108505761106481610e1a565b60606000611b89836002612827565b611b949060026127fb565b67ffffffffffffffff811115611bac57611bac612962565b6040519080825280601f01601f191660200182016040528015611bd6576020820181803683370190505b509050600360fc1b81600081518110611bf157611bf161294c565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c2057611c2061294c565b60200101906001600160f81b031916908160001a9053506000611c44846002612827565b611c4f9060016127fb565b90505b6001811115611cc7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c8357611c8361294c565b1a60f81b828281518110611c9957611c9961294c565b60200101906001600160f81b031916908160001a90535060049490941c93611cc081612889565b9050611c52565b5083156111445760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161071a565b611d208383611f0e565b611d2d6000848484611d49565b6108505760405162461bcd60e51b815260040161071a9061270f565b60006001600160a01b0384163b15611e4b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611d8d9033908990889088906004016126bf565b602060405180830381600087803b158015611da757600080fd5b505af1925050508015611dd7575060408051601f3d908101601f19168201909252611dd4918101906124dc565b60015b611e31573d808015611e05576040519150601f19603f3d011682016040523d82523d6000602084013e611e0a565b606091505b508051611e295760405162461bcd60e51b815260040161071a9061270f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611661565b506001949350505050565b6001600160a01b038316611eb157611eac81600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b611ed4565b816001600160a01b0316836001600160a01b031614611ed457611ed4838261205c565b6001600160a01b038216611eeb57610850816120f9565b826001600160a01b0316826001600160a01b0316146108505761085082826121a8565b6001600160a01b038216611f645760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161071a565b6000818152600360205260409020546001600160a01b031615611fc95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161071a565b611fd560008383611b01565b6001600160a01b0382166000908152600460205260408120805460019290611ffe9084906127fb565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000600161206984610d93565b6120739190612846565b6000838152600860205260409020549091508082146120c6576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60095460009061210b90600190612846565b6000838152600a6020526040812054600980549394509092849081106121335761213361294c565b9060005260206000200154905080600983815481106121545761215461294c565b6000918252602080832090910192909255828152600a9091526040808220849055858252812055600980548061218c5761218c612936565b6001900381819060005260206000200160009055905550505050565b60006121b383610d93565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b8280546121f8906128a0565b90600052602060002090601f01602090048101928261221a5760008555612260565b82601f1061223357805160ff1916838001178555612260565b82800160010185558215612260579182015b82811115612260578251825591602001919060010190612245565b5061226c929150612270565b5090565b5b8082111561226c5760008155600101612271565b600067ffffffffffffffff808411156122a0576122a0612962565b604051601f8501601f19908116603f011681019082821181831017156122c8576122c8612962565b816040528093508581528686860111156122e157600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461231257600080fd5b919050565b60006020828403121561232957600080fd5b611144826122fb565b6000806040838503121561234557600080fd5b61234e836122fb565b915061235c602084016122fb565b90509250929050565b60008060006060848603121561237a57600080fd5b612383846122fb565b9250612391602085016122fb565b9150604084013590509250925092565b600080600080608085870312156123b757600080fd5b6123c0856122fb565b93506123ce602086016122fb565b925060408501359150606085013567ffffffffffffffff8111156123f157600080fd5b8501601f8101871361240257600080fd5b61241187823560208401612285565b91505092959194509250565b6000806040838503121561243057600080fd5b612439836122fb565b91506020830135801515811461244e57600080fd5b809150509250929050565b6000806040838503121561246c57600080fd5b612475836122fb565b946020939093013593505050565b60006020828403121561249557600080fd5b5035919050565b600080604083850312156124af57600080fd5b8235915061235c602084016122fb565b6000602082840312156124d157600080fd5b813561114481612978565b6000602082840312156124ee57600080fd5b815161114481612978565b60006020828403121561250b57600080fd5b813567ffffffffffffffff81111561252257600080fd5b8201601f8101841361253357600080fd5b61166184823560208401612285565b60006020828403121561255457600080fd5b5051919050565b6000815180845261257381602086016020860161285d565b601f01601f19169290920160200192915050565b6000815161259981856020860161285d565b9290920192915050565b600080845481600182811c9150808316806125bf57607f831692505b60208084108214156125df57634e487b7160e01b86526022600452602486fd5b8180156125f3576001811461260457612631565b60ff19861689528489019650612631565b60008b81526020902060005b868110156126295781548b820152908501908301612610565b505084890196505b5050505050506126418185612587565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161268281601785016020880161285d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126b381602884016020880161285d565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906126f29083018461255b565b9695505050505050565b602081526000611144602083018461255b565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526029908201527f4d696e746572436f6e74726f6c3a206e6f74206120534d4f4c425241494e5f4f604082015268574e45525f524f4c4560b81b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561280e5761280e61290a565b500190565b60008261282257612822612920565b500490565b60008160001904831182151516156128415761284161290a565b500290565b6000828210156128585761285861290a565b500390565b60005b83811015612878578181015183820152602001612860565b838111156110645750506000910152565b6000816128985761289861290a565b506000190190565b600181811c908216806128b457607f821691505b602082108114156128d557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156128ef576128ef61290a565b5060010190565b60008261290557612905612920565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146108b057600080fdfecffa9b50753c7b5036f84470434f5fc280bacb0c75da644f758e47448764b1fda264697066735822122061404e38f6f96bc9670b264ca0f6110a7cc8a485311942deb9dfbd95c7a05e0f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "canUpgrade(uint256)": {
        "params": {
          "_tokenId": "tokenId of the land"
        },
        "returns": {
          "availableLevel": "what level can land be upgraded to",
          "isUpgradeAvailable": "true if higher level is available"
        }
      },
      "findBiggestBrainIQ(address)": {
        "params": {
          "_owner": "owner of the land"
        },
        "returns": {
          "highestIQ": "IQ of the biggest brain"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "upgrade(uint256)": {
        "params": {
          "_tokenId": "tokenId of the land"
        }
      }
    },
    "stateVariables": {
      "landLevels": {
        "details": "tokenId => land level"
      },
      "landMaxLevel": {
        "details": "18 decimals"
      },
      "levelIQCost": {
        "details": "18 decimals"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Land.sol:Land",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 509,
        "contract": "contracts/Land.sol:Land",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 511,
        "contract": "contracts/Land.sol:Land",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 515,
        "contract": "contracts/Land.sol:Land",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 519,
        "contract": "contracts/Land.sol:Land",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 523,
        "contract": "contracts/Land.sol:Land",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 529,
        "contract": "contracts/Land.sol:Land",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1448,
        "contract": "contracts/Land.sol:Land",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1452,
        "contract": "contracts/Land.sol:Land",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1455,
        "contract": "contracts/Land.sol:Land",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1459,
        "contract": "contracts/Land.sol:Land",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2642,
        "contract": "contracts/Land.sol:Land",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)2154_storage"
      },
      {
        "astId": 2644,
        "contract": "contracts/Land.sol:Land",
        "label": "baseURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2647,
        "contract": "contracts/Land.sol:Land",
        "label": "landMaxLevel",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2650,
        "contract": "contracts/Land.sol:Land",
        "label": "levelIQCost",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2655,
        "contract": "contracts/Land.sol:Land",
        "label": "landLevels",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2658,
        "contract": "contracts/Land.sol:Land",
        "label": "smolBrain",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(SmolBrain)4190"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(SmolBrain)4190": {
        "encoding": "inplace",
        "label": "contract SmolBrain",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2154_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2153,
            "contract": "contracts/Land.sol:Land",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Land.sol:Land",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Land.sol:Land",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}